<% --[[=========== JS ==========]] %>
<%+vpnconfig/vpnconfig.js%>

<% --[[=========== LUA BACKEND ==========]] %>
<%
	local vpnType = "gre"
%>

<div id="view">
    <h2><%:GRE tunnels %></h2>

	<div id="gre_rows" class="table">
		<div class="tr table-titles">
			<div class="th">Name</div>
			<div class="th">Active</div>
			<div class="th center nowrap cbi-section-actions"><%:Actions %></div>
		</div>
	</div>
	<div class="cbi-page-actions">
        <span id="btn_enable_spinner" class="btn_spinner"></span> 
        <input class="cbi-button cbi-button-apply" type="button" value="Create new" onclick="showModal(new GreData())"> 
    </div>
</div>

<script type="text/javascript">

class GreData extends VpnData {
	name = "";
	type = '<%=vpnType%>';
	isActive = false;
	options = {
		localAddr: "",
		remoteAddr: "",
		netType: "",
		bridge: "",
		tunnelIp: "",
		tunnelMask: "",
		greKey: "",
		zone: "",
		notFragment : "1",
	};
}

var localAddresses = [];
var bridges = [];
var firewallZones = [];
var networkTypes = ["L2 layer"];

get_list_firewall_zone(function(list){
	firewallZones = list;
});

get_list_bridges(function(list){
	bridges = list;
});

get_list_interfaces(function(list){
	localAddresses = list;
});

get_cfg_data('<%=vpnType%>', function(sections) {
	for (s in sections) {
		var newGre = new GreData();
		newGre.name = sections[s]['.name'];
		newGre.isActive = parse_bool(sections[s]['isActive']);
		newGre.options['localAddr'] = sections[s]['localAddr'];
		newGre.options['remoteAddr'] = sections[s]['remoteAddr'];
		newGre.options['netType'] = sections[s]['netType'];
		newGre.options['bridge'] = sections[s]['bridge'];
		newGre.options['tunnelIp'] = sections[s]['tunnelIp'];
		newGre.options['tunnelMask'] = sections[s]['tunnelMask'];
		newGre.options['greKey'] = sections[s]['greKey'];
		newGre.options['zone'] = sections[s]['zone'];
		newGre.options['notFragment'] = parse_bool(sections[s]['notFragment']);
		addRow('gre_rows', newGre);
	}
});

function showModal(greData) {
	L.require('ui').then(function(ui) {
		var name = new ui.Textfield(greData.name, {
			placeholder: "Name",
			optional: false,
			readonly: greData.name.length > 0,
			validate: function(inp) {
				return true;
			}
		});

		var localAddr = new ui.Dropdown(greData.options.localAddr, make_dropdown_options(localAddresses), {
			multiple: false,
			optional: false
		});

		var remoteAddr = new ui.Textfield(greData.options.remoteAddr, {
			placeholder: "Remote IP",
			optional: false,
		});

		var netType = new ui.Dropdown(greData.options.netType, make_dropdown_options(networkTypes), {
			multiple: false,
			optional: false
		});

		var bridge = new ui.Dropdown(greData.options.bridge, make_dropdown_options(bridges), {
			multiple: false,
			optional: false,
			create: false,
		});

		var tunnelIp = new ui.Textfield(greData.options.tunnelIp, {
			optional: false,
			placeholder: "Local IP for tunnel"
		});

		var tunnelMask = new ui.Textfield(greData.options.tunnelMask, {
			optional: false,
			placeholder: "Netmask"
		});

		var greKey = new ui.Textfield(greData.options.greKey, {
			optional: false,
			placeholder: "Leave blank if not used"
		});

		var zone = new ui.Dropdown(greData.options.zone, make_dropdown_options(firewallZones), {
			multiple: false,
			create: false,
			optional: false
		});

		var notFragment = new ui.Checkbox(greData.options.notFragment);

		L.showModal('Configure GRE tunnel', [
			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Name %>')),
				E('div', { class: 'cbi-value-field' }, [name.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Local address %>')),
				E('div', { class: 'cbi-value-field' }, [localAddr.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Remote address %>')),
				E('div', { class: 'cbi-value-field' }, [remoteAddr.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Network type %>')),
				E('div', { class: 'cbi-value-field' }, [netType.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Add to Bridge or create new %>')),
				E('div', { class: 'cbi-value-field' }, [bridge.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Tunnel IP %>')),
				E('div', { class: 'cbi-value-field' }, [tunnelIp.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Tunnel netmask %>')),
				E('div', { class: 'cbi-value-field' }, [tunnelMask.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:GRE key %>')),
				E('div', { class: 'cbi-value-field' }, [greKey.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Firewall zone %>')),
				E('div', { class: 'cbi-value-field' }, [zone.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Dont fragment packets %>')),
				E('div', { class: 'cbi-value-field' }, [notFragment.render()])
			]),

			E('div', { class: 'cbi-value-field' }, [
				E('div', {
					class: 'btn',
					click: function() {
						L.hideModal()
					}
				}, _('Close')),
				' ',
				E('div', {
					class: 'btn success',
					click: function() {
						//TODO: validate and save data to config file
						greData.name = name.getValue(); 
						greData.options['localAddr'] = localAddr.getValue(); 
						greData.options['remoteAddr'] = remoteAddr.getValue(); 
						greData.options['netType'] = netType.getValue(); 
						greData.options['bridge'] = bridge.getValue(); 
						greData.options['tunnelIp'] = tunnelIp.getValue(); 
						greData.options['tunnelMask'] = tunnelMask.getValue(); 
						greData.options['greKey'] = greKey.getValue(); 
						greData.options['zone'] = zone.getValue(); 
						greData.options['notFragment'] = notFragment.getValue(); 
						commitConfig(greData);
						L.hideModal()
					}
				}, _('Save')),
			]),
		]);
	});
}

</script>