<% --[[=========== JS ==========]] %>
<%+vpnconfig/vpnconfig.js%>

<div id="view">
    <h2><%:GRE %></h2>

	<div id="gre_rows" class="table">
		<div class="tr table-titles">
			<div class="th">Name</div>
			<div class="th">Active</div>
			<div class="th center nowrap cbi-section-actions"><%:Actions %></div>
		</div>
	</div>
	<div class="cbi-page-actions">
        <input class="cbi-button cbi-button-apply" type="button" value="Create new" onclick="showModal(new GreData())"> 
    </div>
</div>

<script type="text/javascript">

var GreData = function() {
	this.name = "";
	this.isActive = false;
	this.options = {
		localAddr: "",
		remoteAdderss: "",
		netType: "",
		bridge: "",
		tunnelIp: "",
		tunnelMask: "",
		greKey: "",
		zone: "",
		notFragment : "1",
	};
}

var localAddresses = {"loopback":"loopback"};
var bridges = {"bridge1":"bridge1", "bridge2":"bridge2"};
var firewallZones = {};
var networkTypes = {"L2 layer":"L2 layer"};

L.require("ui").then(function(ui){
	L.require("uci").then(function(uci) {
		uci.load("vpnconfig_gre").then(function(out){
			var sections = uci.sections('vpnconfig_gre');
			for (s in sections) {
				var newGre = new GreData();
				newGre.name = sections[s]['.name'];
				newGre.isActive = sections[s]['isActive'] == 'true' || sections[s]['isActive'] == '1';
				newGre.options['localAddr'] = sections[s]['localAddr'];
				newGre.options['remoteAdderss'] = sections[s]['remoteAdderss'];
				newGre.options['netType'] = sections[s]['netType'];
				newGre.options['bridge'] = sections[s]['bridge'];
				newGre.options['tunnelIp'] = sections[s]['tunnelIp'];
				newGre.options['tunnelMask'] = sections[s]['tunnelMask'];
				newGre.options['greKey'] = sections[s]['greKey'];
				newGre.options['zone'] = sections[s]['zone'];
				newGre.options['notFragment'] = sections[s]['notFragment'];
				addRow(newGre);
			}
		});
		
		function addRow(greData) {
			var container = E('div', { id: greData.name, class: 'tr '}, [
				E('div', {class: 'td'}, E('div', {}, greData.name)),
				E('div', {class: 'td'}, E('div', {id: greData.name+'-active'}, (greData.isActive == true ? 'yes' : 'no'))),
				E('div', {class: "nowrap cbi-section-actions td", style: "text-align: center;"}, [
					E('div', {class: 'btn cbi-button-apply', style: "display: initial;", click: function() {activateConfig(greData);}}, _('Activate')),' ',
					E('div', {class: 'btn cbi-button-apply', style: "display: initial;", click: function() {showModal(greData);}}, _('Edit')),' ',
					E('div', {class: 'btn cbi-button-apply', style: "display: initial;", click: function() {deleteConfig(greData);}}, _('Delete')),
				])
			])
						
			var viewWrapper= document.getElementById('gre_rows');
			viewWrapper.appendChild(container);
		}
	});
});


function showModal(greData) {
	L.require('ui').then(function(ui) {
		var name = new ui.Textfield(greData.name, {
			placeholder: "Name",
			optional: false,
			readonly: greData.name.length > 0,
			validate: function(inp) {
				return true;
			}
		});

		var localAddr = new ui.Dropdown(greData.options.localAddr, localAddresses, {
			multiple: false,
			optional: false
		});

		var remoteAdderss = new ui.Textfield(greData.options.remoteAdderss, {
			placeholder: "Remote IP",
			optional: false,
		});

		var netType = new ui.Dropdown(greData.options.netType, networkTypes, {
			multiple: false,
			optional: false
		});

		var bridge = new ui.Dropdown(greData.options.bridge, bridges, {
			multiple: false,
			optional: false,
			create: true,
		});

		var tunnelIp = new ui.Textfield(greData.options.tunnelIp, {
			optional: false,
			placeholder: "Local IP for tunnel"
		});

		var tunnelMask = new ui.Textfield(greData.options.tunnelMask, {
			optional: false,
			placeholder: "Netmask"
		});

		var greKey = new ui.Textfield(greData.options.greKey, {
			optional: false,
			placeholder: "Leave blank if not used"
		});

		var zone = new ui.Dropdown(greData.options.firewallZones, firewallZones, {
			multiple: false,
			create: true,
			optional: false
		});

		var notFragment = new ui.Checkbox(greData.options.notFragment);

		L.showModal('Configure GRE tunnel', [
			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Name %>')),
				E('div', { class: 'cbi-value-field' }, [name.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Local address %>')),
				E('div', { class: 'cbi-value-field' }, [localAddr.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Remote address %>')),
				E('div', { class: 'cbi-value-field' }, [remoteAdderss.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Network type %>')),
				E('div', { class: 'cbi-value-field' }, [netType.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Add to Bridge or create new %>')),
				E('div', { class: 'cbi-value-field' }, [bridge.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Tunnel IP %>')),
				E('div', { class: 'cbi-value-field' }, [tunnelIp.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Tunnel netmask %>')),
				E('div', { class: 'cbi-value-field' }, [tunnelMask.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:GRE key %>')),
				E('div', { class: 'cbi-value-field' }, [greKey.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Firewall zone %>')),
				E('div', { class: 'cbi-value-field' }, [zone.render()])
			]),

			E('div', { class: 'cbi-value' }, [
				E('label', { 'class': 'cbi-value-title' }, _('<%:Dont fragment packets %>')),
				E('div', { class: 'cbi-value-field' }, [notFragment.render()])
			]),

			E('div', { class: 'cbi-value-field' }, [
				E('div', {
					class: 'btn',
					click: function() {
						L.hideModal()
					}
				}, _('Close')),
				' ',
				E('div', {
					class: 'btn success',
					click: function() {
						//TODO: validate and save data to config file
						greData.name = name.getValue(); 
						greData.options['localAddr'] = localAddr.getValue(); 
						greData.options['remoteAdderss'] = remoteAdderss.getValue(); 
						greData.options['netType'] = netType.getValue(); 
						greData.options['bridge'] = bridge.getValue(); 
						greData.options['tunnelIp'] = tunnelIp.getValue(); 
						greData.options['tunnelMask'] = tunnelMask.getValue(); 
						greData.options['greKey'] = greKey.getValue(); 
						greData.options['zone'] = zone.getValue(); 
						greData.options['notFragment'] = notFragment.getValue(); 
						commitConfig(greData);
						L.hideModal()
					}
				}, _('Save')),
			]),
		]);
	});
}

function commitConfig(greData) {
	L.require('uci').then(function(uci){
		var section = uci.get('vpnconfig_gre', greData.name);
		if (!section) {
			send_action("add", "gre", greData);
		} else {
			send_action("edit", "gre", greData);
		}
	});
}

function activateConfig(greData) {
	greData.isActive = !greData.isActive; 
	send_action("enable", "gre", greData);
}

function deleteConfig(greData) {
	send_action("delete", "gre", greData);

}

</script>