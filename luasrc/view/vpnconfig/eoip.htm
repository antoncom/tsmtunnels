<% --[[=========== JS ==========]] %>
<%+vpnconfig/vpnconfig.js%>

<% --[[=========== LUA BACKEND ==========]] %>
<%
	local vpnType = "eoip"
%>

<div id="view">
    <h2><%:EoIP tunnels %></h2>

	<div id="eoip_rows" class="table">
		<div class="tr table-titles">
			<div class="th">Name</div>
			<div class="th">Active</div>
			<div class="th center nowrap cbi-section-actions"><%:Actions %></div>
		</div>
	</div>
	<div class="cbi-page-actions">
        <span id="btn_enable_spinner" class="btn_spinner"></span> 
        <input class="cbi-button cbi-button-apply" type="button" value="Create new" onclick="showModal(new EoIPData())"> 
    </div>
</div>

<script type="text/javascript">

	class EoIPData extends VpnData {
		name = "";
		type = '<%=vpnType%>';
		isActive = false;
		options = {
			localAddr: "",
			remoteAddr: "",
			bridge: "",
			tunnelIp: "",
			tunnelMask: "",
			tunnelId: "",
			zone: "",
		};
	}
	
	var localAddresses = ["loopback"];
	var bridges = ["bridge1", "bridge2"];
	var firewallZones = [];
	
	get_firewall_zone_list(function(list){
		firewallZones = list;
	});

	get_cfg_data('<%=vpnType%>', function(sections) {
		for (s in sections) {
			var newEoIP = new EoIPData();
			newEoIP.name = sections[s]['.name'];
			newEoIP.isActive = parse_bool(sections[s]['isActive']);
			newEoIP.options['localAddr'] = sections[s]['localAddr'];
			newEoIP.options['remoteAddr'] = sections[s]['remoteAddr'];
			newEoIP.options['bridge'] = sections[s]['bridge'];
			newEoIP.options['tunnelIp'] = sections[s]['tunnelIp'];
			newEoIP.options['tunnelMask'] = sections[s]['tunnelMask'];
			newEoIP.options['tunnelId'] = sections[s]['tunnelId'];
			newEoIP.options['zone'] = sections[s]['zone'];
			addRow('eoip_rows', newEoIP);
		}
	});
	
	function showModal(eoipData) {
		L.require('ui').then(function(ui) {
			var name = new ui.Textfield(eoipData.name, {
				placeholder: "Name",
				optional: false,
				readonly: eoipData.name.length > 0,
				validate: function(inp) {
					return true;
				}
			});
	
			var localAddr = new ui.Dropdown(eoipData.options.localAddr, make_dropdown_options(localAddresses), {
				multiple: false,
				optional: false
			});
	
			var remoteAddr = new ui.Textfield(eoipData.options.remoteAddr, {
				placeholder: "Remote IP",
				optional: false,
			});
	
			var bridge = new ui.Dropdown(eoipData.options.bridge, make_dropdown_options(bridges), {
				multiple: false,
				optional: false,
				create: true,
			});
	
			var tunnelIp = new ui.Textfield(eoipData.options.tunnelIp, {
				optional: false,
				placeholder: "Local IP for tunnel"
			});
	
			var tunnelMask = new ui.Textfield(eoipData.options.tunnelMask, {
				optional: false,
				placeholder: "Netmask"
			});
	
			var tunnelId = new ui.Textfield(eoipData.options.tunnelId, {
				optional: false,
				placeholder: ""
			});
	
			var zone = new ui.Dropdown(eoipData.options.zone, make_dropdown_options(firewallZones), {
				multiple: false,
				create: false,
				optional: false
			});
	
			L.showModal('Configure GRE tunnel', [
				E('div', { class: 'cbi-value' }, [
					E('label', { 'class': 'cbi-value-title' }, _('<%:Name %>')),
					E('div', { class: 'cbi-value-field' }, [name.render()])
				]),
	
				E('div', { class: 'cbi-value' }, [
					E('label', { 'class': 'cbi-value-title' }, _('<%:Local address %>')),
					E('div', { class: 'cbi-value-field' }, [localAddr.render()])
				]),
	
				E('div', { class: 'cbi-value' }, [
					E('label', { 'class': 'cbi-value-title' }, _('<%:Remote address %>')),
					E('div', { class: 'cbi-value-field' }, [remoteAddr.render()])
				]),
	
				E('div', { class: 'cbi-value' }, [
					E('label', { 'class': 'cbi-value-title' }, _('<%:Add to Bridge or create new %>')),
					E('div', { class: 'cbi-value-field' }, [bridge.render()])
				]),
	
				E('div', { class: 'cbi-value' }, [
					E('label', { 'class': 'cbi-value-title' }, _('<%:Tunnel IP %>')),
					E('div', { class: 'cbi-value-field' }, [tunnelIp.render()])
				]),
	
				E('div', { class: 'cbi-value' }, [
					E('label', { 'class': 'cbi-value-title' }, _('<%:Tunnel netmask %>')),
					E('div', { class: 'cbi-value-field' }, [tunnelMask.render()])
				]),
	
				E('div', { class: 'cbi-value' }, [
					E('label', { 'class': 'cbi-value-title' }, _('<%:GRE key %>')),
					E('div', { class: 'cbi-value-field' }, [tunnelId.render()])
				]),
	
				E('div', { class: 'cbi-value' }, [
					E('label', { 'class': 'cbi-value-title' }, _('<%:Firewall zone %>')),
					E('div', { class: 'cbi-value-field' }, [zone.render()])
				]),
	
				E('div', { class: 'cbi-value-field' }, [
					E('div', {
						class: 'btn',
						click: function() {
							L.hideModal()
						}
					}, _('Close')),
					' ',
					E('div', {
						class: 'btn success',
						click: function() {
							//TODO: validate and save data to config file
							eoipData.name = name.getValue(); 
							eoipData.options['localAddr'] = localAddr.getValue(); 
							eoipData.options['remoteAddr'] = remoteAddr.getValue(); 
							eoipData.options['bridge'] = bridge.getValue(); 
							eoipData.options['tunnelIp'] = tunnelIp.getValue(); 
							eoipData.options['tunnelMask'] = tunnelMask.getValue(); 
							eoipData.options['tunnelId'] = tunnelId.getValue(); 
							eoipData.options['zone'] = zone.getValue(); 
							commitConfig(eoipData);
							L.hideModal()
						}
					}, _('Save')),
				]),
			]);
		});
	}
	
</script>