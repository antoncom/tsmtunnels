<% --[[=========== LUA BACKEND ==========]] %>
<%
	local config = "vpnconfig"
%>

<script src="<%=resource%>/tsmodem/jquery/jquery-3.5.1.min.js"
		type="text/javascript"
		charset="utf-8"></script>

<script src="<%=resource%>/tsmodem/nearley/nearley.js?v=1.5.2"
		type="text/javascript"
		charset="utf-8"></script>

<%+vpnconfig/ui_validator/index.js%>

<script type="text/javascript">


function nearleyValidator(fieldType, errormsg) {
	return function(user_input_text) {
		// this function is declared at "ui_validator/index.js.htm"
		var gramma = nearley_validator(fieldType);
		if (!gramma) {
			console.log('Unexpected fieldType', fieldType);
			return "unknown grammar";
		}

		const parser = new nearley.Parser(nearley.Grammar.fromCompiled(gramma));
		try {
			var pf = parser.feed(user_input_text)
			if (pf.results.length > 0)
				return true; // it's a requirement of LuCI widget API
			else
				return errormsg;
		}
		catch (e) {
			return errormsg;
		}
	}
}

function spinner(state) {
	var element = document.getElementById("btn_enable_spinner");
	if (state === true) {
		element.style.width = "16px";
		element.innerHTML = '<img src="<%=resource%>/icons/loading.gif" alt="<%:Loading%>" width="16" height="16" style="vertical-align:middle" />';
	}
	else {
		element.style.width = "0px";
		element.innerHTML = '';
	}
}

function get_cfg_data(vpnType, callback) {
	spinner(true);
	L.require("uci").then(function(uci) {
		uci.load("<%=config%>").then(function(out){
			var sections = uci.sections('<%=config%>', vpnType);
			if (callback) {
				callback(sections);
			}
			spinner(false);
		});
	});
}

function addRow(elementId, data) {
	var container = E('div', { id: data.name, class: 'tr '}, [
		E('div', {class: 'td'}, E('div', {}, data.name)),
		E('div', {class: 'td'}, E('div', {id: data.name+'-active'}, (data.isActive == true ? 'yes' : 'no'))),
		E('div', {class: "nowrap cbi-section-actions td", style: "text-align: center;"}, [
			E('div', {class: 'cbi-button cbi-button-neutral ', style: "display: initial;", click: function() {activateConfig(data);}}, _('Activate')),' ',
			E('div', {class: 'cbi-button cbi-button-edit', style: "display: initial;", click: function() {showModal(data);}}, _('Edit')),' ',
			E('div', {class: 'cbi-button cbi-button-remove', style: "display: initial;", click: function() {deleteConfig(data);}}, _('Delete')),
		])
	])
				
	var viewWrapper= document.getElementById(elementId);
	viewWrapper.appendChild(container);
}

function commitConfig(data) {
	L.require('uci').then(function(uci){
		var section = uci.get('<%=config%>', data.name);
		if (!section) {
			send_action("add", data, function(){
				location.reload();
			});
		} else {
			send_action("edit", data, function(){
				location.reload();
			});
		}
	});
}

function activateConfig(data) {
	data.isActive = !data.isActive; 
	send_action("enable", data, function(){
		location.reload();
	});
}

function deleteConfig(data) {
	send_action("delete", data, function(){
		location.reload();
	});
}

function send_action(action, data, callback) {
	var xhr = new XHR(false);
	var url = '<%=luci.dispatcher.build_url("admin", "services", config, "action")%>/'+ '%h/%h'.format(action);
	spinner(true);

	xhr.post(url, data, function(resp) {
		if (!resp) {
			return;
		}
		console.log(action+' success');
		spinner(false);

        if(callback) callback();
	});
}

function parse_bool(value) {
    return value == 'true' || value == 1;
}

function make_dropdown_options(list) {
    var result = {};
    var item = "";

    for(i in list) {
        item = list[i];
        result[item] = item;
    }

    return result;
}

function get_list_firewall_zone(callback) {
	L.require("uci").then(function(uci) {
		uci.load('firewall').then(function(out){
			var result = ["<none>",];
			uci.sections('firewall', 'zone', function(item){
				result.push(item.name);
			});
			callback(result);
		});
	});
}

function get_list_bridges(callback) {
	L.require("uci").then(function(uci) {
		uci.load('network').then(function(out){
			var result = ["<none>",];
			uci.sections('network', 'interface', function(item){
				if (item.type && item.type == 'bridge') {
					result.push(item['.name']);
				}
			});
			callback(result);
		});
	});
}

function get_list_interfaces(callback) {
	L.require("uci").then(function(uci) {
		uci.load('network').then(function(out){
			var result = [];
			uci.sections('network', 'interface', function(item){
				result.push(item['.name']);
			});
			callback(result);
		});
	});
}

</script>