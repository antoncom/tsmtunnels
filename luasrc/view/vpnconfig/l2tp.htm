<% --[[=========== JS ==========]] %>
<%+vpnconfig/vpnconfig.js%>

<% --[[=========== LUA BACKEND ==========]] %>
<%
	local vpnType = "l2tp"
%>

<div id="view">
    <h2><%:L2TP Client %></h2>

	<div class="cbi-map">
        <div class="cbi-map-section">
	        <div class="cbi-map-section-node" id="pageContent">
               
            </div>
        </div>
	</div>
    <div class="cbi-page-actions">
        <span id="btn_enable_spinner" class="btn_spinner"></span> 
        <input id="btnApply" class="cbi-button cbi-button-apply" type="button" value="<%:Save%>"> 
        <input id="btnReset" class="cbi-button cbi-button-reset" type="button" value="<%:Reset%>"> 
    </div>
</div>


<script type="text/javascript">
//<![CDATA[
L.require('ui').then(function(ui) {
    
    class L2tpData {
        name = "l2tp1";
		type = '<%=vpnType%>';
        isActive = false;
        options = {
            server: "",
            username: "",
            password: "",
            authType: "",
            addOptinos: "",
            isMPPE: false,
            isDefaultRoute: false,
            isIPSecProt: false,
        };
    }
    
    var g_l2tpData = new L2tpData();
    var g_form = {};
    var authTypes = ['any','EAP','PAP','CHAP','MSCHAP', 'MSCHAPv2'];

    function initForm(form, data) {
        form['isActive'] = new ui.Checkbox(data.isActive);
        form['server'] = new ui.Textfield(data.options.server, {
            placeholder: "<%:Server address%>",
            optional: false,
            validate: nearleyValidator('address', '<%:Should contain IPv4 or URL%>')
        });
        form['username'] = new ui.Textfield(data.options.username, {
            placeholder: "<%: Username%>",
            optional: false,
            validate: nearleyValidator('sectionName', '<%:Should contain letters, numbers and "_"%>')
        });
        form['password'] = new ui.Textfield(data.options.password, {
            placeholder: "<%: Password%>",
            optional: false,
            password: true,
            validate: function(input) {
                if (input.length)
                    return true;
                return '<%:Can not be empty%>';
            }
        })
        form['addOptinos'] = new ui.Textfield(data.options.addOptinos, {
            placeholder: "<%:Additional options%>",
            optional: true,
        })
        form['authType'] = new ui.Dropdown(data.options.authType, make_dropdown_options(authTypes), {
            multiple: false,
            optional: false,
            sort: false,
        })
        form['isMPPE'] = new ui.Checkbox(data.options.isMPPE);
        form['isDefaultRoute'] = new ui.Checkbox(data.options.isDefaultRoute);
        form['isIPSecProt'] = new ui.Checkbox(data.options.isIPSecProt);
    }

    function renderForm(form) {
        var container = E('div', {class: 'tr '}, [
            E('div', { class: 'cbi-value' }, [
                E('label', { 'class': 'cbi-value-title' }, '<%:Enable L2TP client%>'),
                E('div', { class: 'cbi-value-field' }, [form.isActive.render()])
            ]),
            E('div', { class: 'cbi-value' }, [
                E('label', { 'class': 'cbi-value-title' }, '<%:Server%>'),
                E('div', { class: 'cbi-value-field' }, [form.server.render()])
            ]),
            E('div', { class: 'cbi-value' }, [
                E('label', { 'class': 'cbi-value-title' }, '<%:Use as default route%>'),
                E('div', { class: 'cbi-value-field' }, [form.isDefaultRoute.render()])
            ]),
            E('div', { class: 'cbi-value' }, [
                E('label', { 'class': 'cbi-value-title' }, '<%:Username%>'),
                E('div', { class: 'cbi-value-field' }, [form.username.render()])
            ]),
            E('div', { class: 'cbi-value' }, [
                E('label', { 'class': 'cbi-value-title' }, '<%:Password%>'),
                E('div', { class: 'cbi-value-field' }, [form.password.render()]),
            ]),
            E('div', { class: 'cbi-value' }, [
                E('label', { 'class': 'cbi-value-title' }, '<%:Use MPPE (MS-CHAP-V2 auth)%>'),
                E('div', { class: 'cbi-value-field' }, [form.isMPPE.render()])
            ]),
            E('div', { class: 'cbi-value' }, [
                E('label', { 'class': 'cbi-value-title' }, '<%:Authentication type%>'),
                E('div', { class: 'cbi-value-field' }, [form.authType.render()])
            ]),
            E('div', { class: 'cbi-value' }, [
                E('label', { 'class': 'cbi-value-title' }, '<%:Additional options%>'),
                E('div', { class: 'cbi-value-field' }, [form.addOptinos.render()])
            ]),
            E('div', { class: 'cbi-value' }, [
                E('label', { 'class': 'cbi-value-title' }, '<%:Use IPSec protection%>'),
                E('div', { class: 'cbi-value-field' }, [form.isIPSecProt.render()])
            ]),
        ])
                    
        var viewWrapper= document.getElementById('pageContent');
        viewWrapper.appendChild(container);
    }

    getCfgData('<%=vpnType%>', function(sections) {
        g_l2tpData.isActive = parse_bool(sections[0]['isActive']);
        g_l2tpData.options['server'] = parse_string(sections[0]['server']);
        g_l2tpData.options['username'] = parse_string(sections[0]['username']);
        g_l2tpData.options['password'] = parse_string(sections[0]['password']);
        g_l2tpData.options['authType'] = parse_string(sections[0]['authType']);
        g_l2tpData.options['addOptinos'] = parse_string(sections[0]['addOptinos']);
        g_l2tpData.options['isMPPE'] = parse_bool(sections[0]['isMPPE']);
        g_l2tpData.options['isDefaultRoute'] = parse_bool(sections[0]['isDefaultRoute']);
        g_l2tpData.options['isIPSecProt'] = parse_bool(sections[0]['isIPSecProt']);
        initForm(g_form, g_l2tpData);
        renderForm(g_form);
        $('#btnReset').on('click', function(){ reset_fields(g_form, g_l2tpData); });
        $('#btnApply').on('click', function(){ apply(g_form); });
    });
    
    function reset_fields(form, data) {
        form.server.setValue(data.options['server']);
        form.username.setValue(data.options['username']);
        form.password.setValue(data.options['password']);
        form.authType.setValue(data.options['authType']);
        form.addOptinos.setValue(data.options['addOptinos']);
        form.isMPPE.setValue(data.options['isMPPE']);
        form.isDefaultRoute.setValue(data.options['isDefaultRoute']);
        form.isIPSecProt.setValue(data.options['isIPSecProt']);
        form.isActive.setValue(data.isActive);

        for (i in form) {
            form[i].triggerValidation();
        }
    }
    
    function apply(form) {
        var isFormValid = true;
        for (i in form) {
            var field = form[i];
            field.triggerValidation();
            isFormValid &= field.isValid();
        }

        if (!isFormValid)
            return;
        
        var l2tpData = new L2tpData();
        l2tpData.options['server'] = form.server.getValue();   
        l2tpData.options['username'] = form.username.getValue(); 
        l2tpData.options['password'] = form.password.getValue(); 
        l2tpData.options['addOptinos'] = form.addOptinos.getValue();   
        l2tpData.options['authType'] = form.authType.getValue(); 
        l2tpData.options['isMPPE'] = form.isMPPE.getValue();   
        l2tpData.options['isDefaultRoute'] = form.isDefaultRoute.getValue();   
        l2tpData.options['isIPSecProt'] = form.isIPSecProt.getValue();   
        l2tpData.isActive = form.isActive.getValue();
        
        send_action("edit", l2tpData, function(){
            if (l2tpData.isActive == g_l2tpData.isActive) {
                location.reload();
            } else {
                send_action("enable", l2tpData, function(){
                    location.reload();
                });
            }
        });
    }
    
});
//]]>
</script>
